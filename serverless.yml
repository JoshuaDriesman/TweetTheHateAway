service: tweet-the-hate-away
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  profile: serverless-framework
  memorySize: 256
  environment:
    TWITTER_API_SECRET_ARN: ${env:TWITTER_API_SECRET_ARN}
    TWITTER_USER_SECRET_ARN: ${env:TWITTER_USER_SECRET_ARN}

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  webpack:
    webpack: webpack.config.js
    includeModules: true

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

layers:
  common:
    path: app/common
    description: Common utility functions for the application.

functions:
  twitter-challenge-response:
    handler: app/twitter-web-hook.twitterCrcResponder
    role: twitterWebhookRole
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - httpApi:
          path: /twitter-web-hook
          method: GET
  twitter-web-hook-receiver:
    handler: app/twitter-web-hook.twitterWebhookReceiver
    role: twitterWebhookRole
    environment:
      TWEET_SNS_TOPIC_ARN:
        Ref: SNSTopicTweettopic
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - httpApi:
          path: /twitter-web-hook
          method: POST
  tweet-responder:
    handler: app/tweet-responder.tweetResponder
    role: tweetResponderRole
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - sns: tweet-topic

resources:
  Resources:
    twitterWebhookRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: TwitterWebhookRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: TwitterApiSecretRead
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "secretsmanager:GetSecretValue"
                  Resource: ${env:TWITTER_API_SECRET_ARN}
          - PolicyName: TweetSnsTopicPublish
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "sns:Publish"
                  Resource:
                    Ref: SNSTopicTweettopic
    tweetResponderRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: TweetResponderRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: TwitterUserSecretRead
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "secretsmanager:GetSecretValue"
                  Resource: ${env:TWITTER_USER_SECRET_ARN}
          - PolicyName: TwitterApiSecretRead
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "secretsmanager:GetSecretValue"
                  Resource: ${env:TWITTER_API_SECRET_ARN}
